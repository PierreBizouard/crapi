# Copyright (C) 2014/15 - Iraklis Diakos (hdiakos@outlook.com)
# Pilavidis Kriton (kriton_pilavidis@outlook.com)
# All Rights Reserved.
# You may use, distribute and modify this code under the
# terms of the ASF 2.0 license.
#

"""Part of the service module."""

# NOTE: unicode_literals causes problems when using instantiation with 'type'
# so use 'str' which is a no-op in Python 3.x and converts arguments properly
# in Python 2.x
# TODO: This is a nested daemon factory class. Maybe we can enhance it?
#       This is also known as CRTP: Curiously Recurring Template Pattern.
from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import generators
# Python native libraries.
from enum import Enum
import os
import sys
import io
import re

from crapi.service.DaemonNamingError import DaemonNamingError

_CLASS_NAME_PATTERN_ = re.compile(
    "^[_a-z][-a-z0-9_]{4,30}$",
    re.IGNORECASE
)


class ACTION(Enum):
    INSTALL = 'install'
    UPDATE = 'update'
    DELETE = 'delete'


class WindowsDaemonFactory(object):

    """A class that allows creating templated Windows services."""

    # FIXME: Use unassociated attribute for users who do not use our library
    #        and want to control a Windows service.
    # TODO: Use uuid and anonymous groups with dictionary lookups.
    # TODO: Perform introspection with classmethods and detect when signature
    #       of overridable methods change and replace them.


def instantiate(
    name='crapi', display_name='CRAPI: Common Range API',
    description='CRAPI: Brought to you by Kounavi :P', timeout=0,
    action=ACTION.UPDATE
):

    """A class that enables implementation of Windows services."""

    class_name = name.replace('-', '_')
    r = _CLASS_NAME_PATTERN_.match(class_name)
    if r is None:
        raise DaemonNamingError(
            'Windows service class names should start with an underscore '
            'or letter followed by alphanumerics or underscore. The '
            'minimum length of the service name should be 6 characters '
            'and the maximum should be 30 characters.',
            'name',
            class_name
        )

    # Boilerplate code time :P
    # Make sure that the service's python class file path is correctly set
    # since there is no __main__ entrypoint (BTW this is desirable).
    try:
        src_file = sys.modules[
            __name__
        ].__file__
    except AttributeError:
        # Executable modules have no __file__ attribute defined.
        from sys import executable
        src_file = executable
    src_file_no_ext = os.path.splitext(
        os.path.abspath(src_file)
    )[0]
    top_md = __name__.split('.')[0]
    proj_base_path = src_file_no_ext.split(top_md)[0]

    base_dir = os.sep.join(src_file.split(os.sep)[:-1])
    class_file = class_name + '.py'
    class_module = '.'.join(__name__.split('.')[:-1]) + '.rt.' + class_name
    template_file = 'WindowsDaemonTemplate.py'
    template_class = os.path.splitext(template_file)[0]
    src_filepath = base_dir + os.sep + template_file
    dst_filepath = base_dir + os.sep + 'rt' + os.sep + class_file
    if not os.path.isfile(dst_filepath) or action == ACTION.UPDATE:
        with io.open(src_filepath, 'r') as fdin, \
             io.open(dst_filepath, 'w') as fdout:
                for line in fdin:
                    if '"""Part of the service module."""' in line:
                        print('"""', file=fdout)
                        print(
                            '    ==================================',
                            file=fdout,
                            end=''
                        )
                        print(
                            '=========================================',
                            file=fdout
                        )
                        line = '    This file is autogenerated. Do NOT modify!'
                        print(line, file=fdout)
                        print(
                            '    ==================================',
                            file=fdout,
                            end=''
                        )
                        print(
                            '=========================================',
                            file=fdout
                        )
                        line = '    Part of the service module.'
                        print(line, file=fdout)
                        line = '"""'
                    if 'class ' + template_class in line:
                        line = ('class ' + class_name
                                + '(object, w32scu.ServiceFramework):')
                    elif '_svc_timeout_ = 0' in line:
                        if timeout == 0:
                            line = '    _svc_timeout_ = w32ev.INFINITE'
                        else:
                            line = '    _svc_timeout_ = ' + str(timeout)
                    elif '_svc_name_ =' in line:
                        line = '    _svc_name_ = \'' + name + '\''
                    elif '_svc_display_name_ =' in line:
                        line = ('    _svc_display_name_ = \''
                                + display_name + '\'')
                    elif '_svc_description_ =' in line:
                        line = ('    _svc_description_ = \''
                                + description + '\'')
                    else:
                        print(line, file=fdout, end='')
                        continue
                    print(line, file=fdout)

    return (class_module, proj_base_path + class_module + '.' + class_name)
